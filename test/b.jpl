(let {i:10 j:1}
    (if (eq .j 0) (print zero_divide) (/ .i .j))
)

(let {i: 10 j: 0}
    (if (gt .j 0) (/ .i .j) (print zero_divide))
)

(not true)
(not false)
(not a)


(let {i:0 n:10}
    (while (lt .i 10)
        (if (eq .i 5) break)
        (set i (+ .i 1))
        .i
    )
)

(is 1 1)
(is 1 a)
(is [1 <atom>] [1 2])
(is (do) null)
.a
(is .a 4) (is .a 3) .u (is .u 1) .u (set u null) .u (is .u 1) .u

(let {x:0 y:1 z:null r:null}
    (set r [(is .u 2) (is .x 0) (is .y 0) (is .z 2)])
)

(let {x:0 y:1 z:null r:null}
    (set r [(is .u 2) (is .x 0) (is .z 2) (is .y 0)])
)

(let { x:0 y:1 z:null r:null}
    (set r (is [.x .y .z][0 1 2]))
)

(let { x:0 y:1 z:null r:null}
    (set r (is [.z .y .x][2 1 0]))
)
# comment
(let { x:0 y:1 z:null r:null}
    (set r (is [.z .y .x][2 1 3]))
)
# comment
